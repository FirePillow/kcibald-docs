{
  "openapi": "3.0.0",
  "info": {
    "description": "Kcibald API",
    "version": "0.0.1",
    "title": "Kcibald API",
    "contact": {
      "name": "wusatosi"
    }
  },
  "servers": [
    {
      "url": "https://api.kcibald.com/v1/",
      "description": "production server end Point"
    },
    {
      "url": "https://api-testing.develop.kcibald.com/v1/",
      "description": "testing / staging server end point, using test / static data"
    }
  ],
  "tags": [
    {
      "name": "general",
      "description": "General request / query"
    },
    {
      "name": "regional",
      "description": "Regional request / query"
    },
    {
      "name": "post",
      "description": "Post related request / query"
    },
    {
      "name": "comment",
      "description": "Comment related request / query"
    },
    {
      "name": "user",
      "description": "user information"
    },
    {
      "name": "config",
      "description": "changing their state"
    }
  ],
  "x-tagGroups": [
    {
      "name": "general",
      "tags": [
        "general",
        "config"
      ]
    },
    {
      "name": "feed",
      "tags": [
        "regional",
        "post",
        "comment",
        "user"
      ]
    }
  ],
  "paths": {
    "/login": {
      "post": {
        "summary": "login",
        "parameters": [],
        "tags": [
          "general"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "account": {
                    "type": "string",
                    "description": "user's user name"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "example": "x2YE7LJMOR",
                    "pattern": "^(?=.*?[a-z])(?=.*?[0-9]).{8,20}$",
                    "minLength": 6,
                    "description": "plain text password"
                  },
                  "captcha": {
                    "type": "string",
                    "description": "google recaptcha validation token"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Login success, may continue"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "403": {
            "description": "Login unsuccessful",
            "content": {
              "application/json": {
                "schema": {
                  "description": "login denied",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    }
                  },
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/user_banned_failure"
                    },
                    {
                      "$ref": "#/components/schemas/recaptcha_failure"
                    },
                    {
                      "$ref": "#/components/schemas/incorrect_password"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/server_failure"
          }
        }
      }
    },
    "/logout": {
      "post": {
        "summary": "logout",
        "tags": [
          "general"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Logout successful"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "500": {
            "$ref": "#/components/responses/server_failure"
          }
        }
      }
    },
    "/registry": {
      "post": {
        "summary": "registry an user",
        "tags": [
          "general"
        ],
        "parameters": [
        ],
        "responses": {
        }
      }
    },
    "/feed": {
      "get": {
        "tags": [
          "general"
        ],
        "summary": "fetch feed",
        "description": "fetch new activities from all subscribed regions",
        "parameters": [
          {
            "$ref": "#/components/parameters/query_mark"
          },
          {
            "$ref": "#/components/parameters/amount"
          }
        ],
        "responses": {
          "200": {
            "description": "fetch success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "properties": {
                        "feeds": {
                          "type": "array",
                          "description": "feed objects",
                          "items": {
                            "$ref": "#/components/schemas/feed"
                          }
                        },
                        "mark": {
                          "$ref": "#/components/schemas/query_mark"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/no_authorization"
          },
          "500": {
            "$ref": "#/components/responses/server_failure"
          }
        }
      }
    },
    "/upload": {
      "post": {
        "summary": "request an upload",
        "description": "This endpoint instructs how client is able to upload an attachment or embedded image to the site. <br>Upon any related creation request (e.g. post creation), client can refer to the file/image by the <i>object_reference_token</i>, if the <i>object_reference_token</i> is not related to any creation for a given time, the token <b>will be expired</b> and user have to upload the file again.",
        "tags": [
          "general"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "upload_type",
            "schema": {
              "enum": [
                "ATTACHMENT",
                "EMBEDDED_IMAGE",
                "AVATAR"
              ]
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/satisfiable_upload_response"
                    },
                    {
                      "$ref": "#/components/schemas/unsatisfiable_upload_response"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/no_authorization"
          },
          "500": {
            "$ref": "#/components/responses/server_failure"
          }
        }
      }
    },
    "/r/{regionId}/": {
      "parameters": [
        {
          "$ref": "#/components/parameters/regionId"
        }
      ],
      "get": {
        "tags": [
          "regional"
        ],
        "summary": "list regional information",
        "operationId": "",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/region"
                        },
                        {
                          "properties": {
                            "top_posts": {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/post_head"
                              },
                              "maxItems": "20"
                            },
                            "post_mark": {
                              "$ref": "#/components/schemas/query_mark"
                            },
                            "child_region": {
                              "type": "array",
                              "nullable": true,
                              "items": {
                                "$ref": "#/components/schemas/region"
                              }
                            }
                          }
                        },
                        {
                          "example": {
                            "name": "DP",
                            "url_key": "DP",
                            "parent": null,
                            "regionId": "dkjkaljfd",
                            "description": "region for talking things about DP",
                            "avatar": "usercontent.kcibald.com/jalkdjkajfdlk.jpeg",
                            "top_posts": [],
                            "post_mark": "5c7fc05f802b95782f1f9e88",
                            "child_region": [
                              {
                                "name": "chat room",
                                "url_key": "DP/chat-room",
                                "parent": {
                                  "name": "DP",
                                  "url_key": "DP",
                                  "parent": null,
                                  "regionId": "dkjkaljfd",
                                  "description": "region for talking things about DP",
                                  "avatar": "usercontent.kcibald.com/jalkdjkajfdlk.jpeg"
                                },
                                "regionId": "dkjkaljfd",
                                "description": "region for talking about things about DP",
                                "avatar": "usercontent.kcibald.com/jalkdjkajfdlk.jpeg"
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/no_authorization"
          },
          "403": {
            "$ref": "#/components/responses/common_auth"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/server_failure"
          }
        }
      }
    },
    "/r/{regionId}/subscribe": {
      "parameters": [
        {
          "$ref": "#/components/parameters/regionId"
        }
      ],
      "post": {
        "tags": [
          "post"
        ],
        "summary": "subscribe to a region",
        "parameters": [],
        "responses": {
          "204": {
            "description": "Subscription successful"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/no_authorization"
          },
          "403": {
            "$ref": "#/components/responses/common_auth"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        }
      }
    },
    "/r/{regionId}/p/": {
      "parameters": [
        {
          "$ref": "#/components/parameters/regionId"
        }
      ],
      "get": {
        "description": "Example url: /r/ib-office/posts",
        "summary": "list posts under region",
        "tags": [
          "post"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/query_mark"
          },
          {
            "$ref": "#/components/parameters/skip"
          },
          {
            "$ref": "#/components/parameters/amount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "posts": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/post_head"
                          }
                        },
                        "query_mark": {
                          "$ref": "#/components/schemas/query_mark"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/no_authorization"
          },
          "403": {
            "$ref": "#/components/responses/common_auth"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/server_failure"
          }
        }
      },
      "put": {
        "summary": "create post",
        "tags": [
          "post"
        ],
        "operationId": "",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "How to get a 7 in math HL",
                    "maxLength": "???"
                  },
                  "content": {
                    "type": "string",
                    "example": "it's impossible"
                  },
                  "attachments": {
                    "$ref": "#/components/schemas/upload_attachments"
                  },
                  "captcha": {
                    "type": "string",
                    "description": "recaptcha token to avoid spamming"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "created",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "enum": [
                            true
                          ]
                        },
                        "link": {
                          "type": "string",
                          "example": "www.kcibald.com/r/ib-office/akdadak",
                          "description": "the link to created post"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request | Post creation requirements not meet",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "enum": [
                            false
                          ]
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "TITLE_LENGTH_EXCEED"
                          ]
                        }
                      }
                    },
                    {
                      "$ref": "#/components/schemas/invalid_attachment_failure"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/no_authorization"
          },
          "403": {
            "$ref": "#/components/responses/common_auth"
          },
          "500": {
            "$ref": "#/components/responses/server_failure"
          }
        }
      }
    },
    "/r/{regionId}/p/{postId}/": {
      "parameters": [
        {
          "$ref": "#/components/parameters/regionId"
        },
        {
          "$ref": "#/components/parameters/postId"
        }
      ],
      "get": {
        "summary": "get post",
        "tags": [
          "post"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/post"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/no_authorization"
          },
          "403": {
            "$ref": "#/components/responses/common_auth"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/server_failure"
          }
        }
      },
      "delete": {
        "tags": [
          "post"
        ],
        "summary": "delete post",
        "parameters": [],
        "responses": {
          "200": {
            "description": "deletion success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/post_head"
                        },
                        {
                          "description": "post deleted"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/no_authorization"
          },
          "403": {
            "$ref": "#/components/responses/common_auth"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/server_failure"
          }
        }
      }
    },
    "/r/{regionId}/p/{postId}/comments/": {
      "parameters": [
        {
          "$ref": "#/components/parameters/regionId"
        },
        {
          "$ref": "#/components/parameters/postId"
        }
      ],
      "get": {
        "summary": "get comments under post",
        "tags": [
          "comment"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/query_mark"
          },
          {
            "$ref": "#/components/parameters/skip"
          },
          {
            "$ref": "#/components/parameters/amount"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "properties": {
                        "comments": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/comment"
                          }
                        },
                        "query_mark": {
                          "$ref": "#/components/schemas/query_mark"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/no_authorization"
          },
          "403": {
            "$ref": "#/components/responses/common_auth"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/server_failure"
          }
        }
      },
      "post": {
        "summary": "create an comment",
        "tags": [
          "comment"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "content": {
                    "type": "string",
                    "example": "impressive!"
                  },
                  "attachments": {
                    "$ref": "#/components/schemas/upload_attachments"
                  },
                  "captcha": {
                    "type": "string",
                    "description": "Google Recaptcha token"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "Link of the comment",
                "example": "/r/super-region/p/how-to-get-45/comments/1"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/comment"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request | Comment creation requirement not meet",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invalid_attachment_failure"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/no_authorization"
          },
          "403": {
            "description": "Reserved"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        }
      }
    },
    "/u/{userId}/": {
      "parameters": [
        {
          "$ref": "#/components/parameters/userId"
        }
      ],
      "get": {
        "summary": "get user information",
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "description": "Fetch success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/u/{userId}/feed/": {
      "get": {
        "summary": "get user feed",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/query_mark"
          },
          {
            "$ref": "#/components/parameters/amount"
          }
        ],
        "responses": {
          "200": {
            "description": "Fetch success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "properties": {
                        "feed": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/feed"
                          }
                        },
                        "query_mark": {
                          "$ref": "#/components/schemas/query_mark"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/no_authorization"
          },
          "403": {
            "$ref": "#/components/responses/common_auth"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/server_failure"
          }
        }
      }
    },
    "/me/": {
      "get": {
        "summary": "get my profile",
        "tags": [
          "user"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Fetch success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/me/subscriptions/": {
      "get": {
        "summary": "get my subscriptions",
        "tags": [
          "user"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Fetch success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/region"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/no_authorization"
          }
        }
      }
    },
    "/me/settings/": {
      "get": {
        "summary": "get user setting",
        "description": "list user's email address, avatar and signature setting",
        "tags": [
          "config"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Fetch Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "emails": {
                      "type": "object",
                      "properties": {
                        "school": {
                          "description": "kcis school's email (usually registration email)",
                          "properties": {
                            "address": {
                              "type": "string",
                              "format": "email"
                            },
                            "validated": {
                              "type": "boolean"
                            }
                          }
                        },
                        "personal": {
                          "description": "personal email",
                          "properties": {
                            "address": {
                              "type": "string",
                              "format": "email"
                            },
                            "validated": {
                              "type": "boolean"
                            }
                          }
                        },
                        "signature": {
                          "type": "string",
                          "description": "signature of the user"
                        }
                      }
                    },
                    "avatar": {
                      "type": "string",
                      "description": "url to avatar file"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/no_authorization"
          },
          "500": {
            "$ref": "#/components/responses/server_failure"
          }
        }
      }
    },
    "/me/settings/credentials": {
      "post": {
        "summary": "modify user credentials",
        "description": "change user's password",
        "tags": [
          "config"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "original_password": {
                    "type": "string",
                    "description": "user's original password",
                    "required": true
                  },
                  "new_password": {
                    "type": "string",
                    "description": "password that user is going to change to"
                  },
                  "captcha": {
                    "type": "string",
                    "description": "google recaptcha token"
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "Request success"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/no_authorization"
          },
          "403": {
            "description": "Incorrect credential",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/recaptcha_failure"
                    },
                    {
                      "$ref": "#/components/schemas/incorrect_password"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/server_failure"
          }
        }
      }
    },
    "/me/settings/email": {
      "post": {
        "summary": "update user email",
        "tags": [
          "config"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "email_type": {
                    "type": "string",
                    "enum": [
                      "PERSONAL",
                      "SCHOOL"
                    ]
                  },
                  "address": {
                    "type": "string",
                    "format": "email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Update success"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/no_authorization"
          },
          "500": {
            "$ref": "#/components/responses/server_failure"
          }
        }
      }
    },
    "/me/settings/email/{emailType}/resend": {
      "post": {
        "summary": "resend verification email to the email address",
        "tags": [
          "config"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "emailType",
            "schema": {
              "type": "string",
              "enum": [
                "PERSONAL",
                "SCHOOL"
              ]
            }
          },
          {
            "in": "query",
            "name": "captcha",
            "schema": {
              "type": "string",
              "description": "recaptcha validation token (for avoiding spam mail abuse)"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Request Success"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/no_authorization"
          },
          "403": {
            "$ref": "#/components/responses/recaptcha_auth"
          },
          "500": {
            "$ref": "#/components/responses/server_failure"
          }
        }
      }
    },
    "/me/settings/avatar": {
      "post": {
        "summary": "update user avatar",
        "tags": [
          "config"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
            }
          }
        },
        "responses": {
        }
      }
    }
  },
  "components": {
    "parameters": {
      "regionId": {
        "in": "path",
        "name": "region",
        "required": true,
        "allowEmptyValue": false,
        "schema": {
          "type": "string",
          "description": "the <b>region id</b> or the <b>url key</b> of the requested region"
        }
      },
      "postId": {
        "in": "path",
        "name": "postId",
        "required": true,
        "allowEmptyValue": false,
        "schema": {
          "type": "string",
          "description": "the <b>post id</b> or the <b>url key</b> of the requested post"
        }
      },
      "userId": {
        "in": "path",
        "name": "userId",
        "schema": {
          "type": "string",
          "description": "the <b>user id</b> or the <b>url key</b> of the requested user"
        }
      },
      "query_mark": {
        "in": "query",
        "name": "after",
        "description": "fetch activities after a post identified using an special id for paging, this will be provided upon query",
        "schema": {
          "$ref": "#/components/schemas/query_mark"
        }
      },
      "amount": {
        "in": "query",
        "name": "amount",
        "description": "maximum number of activities to return",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 50,
          "required": "false"
        }
      },
      "skip": {
        "name": "skip",
        "in": "query",
        "description": "skip number of objects",
        "schema": {
          "type": "integer",
          "example": 10
        }
      }
    },
    "schemas": {
      "region": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "chat room"
          },
          "url_key": {
            "type": "string",
            "example": "DP/chat-room"
          },
          "parent": {
            "description": "parent region",
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "DP"
              },
              "url_key": {
                "type": "string",
                "example": "DP"
              },
              "parent": {
                "enum": [
                  null
                ]
              },
              "regionId": {
                "type": "string",
                "example": "dkjkaljfd"
              },
              "description": {
                "type": "string",
                "example": "DP region"
              },
              "avatar": {
                "type": "string",
                "example": "usercontent.kcibald.com/jalkdjkajfdlk.jpeg"
              }
            }
          },
          "regionId": {
            "type": "string",
            "example": "dkjkaljfd"
          },
          "description": {
            "type": "string",
            "example": "region for talking about things about DP"
          },
          "avatar": {
            "type": "string",
            "example": "usercontent.kcibald.com/jalkdjkajfdlk.jpeg"
          }
        }
      },
      "post_head": {
        "type": "object",
        "description": "represents a minimized post object, containing only the main body without comments",
        "properties": {
          "title": {
            "type": "string",
            "example": "why not to choice physics HL"
          },
          "postId": {
            "type": "string",
            "example": "AXPYAOfpEi"
          },
          "url_key": {
            "type": "string",
            "example": "why_not_to_choice_physics_HL"
          },
          "regionId": {
            "type": "string",
            "example": "dkjkaljfd"
          },
          "author": {
            "$ref": "#/components/schemas/user"
          },
          "create_time_stamp": {
            "$ref": "#/components/schemas/create_timestamp"
          },
          "update_time_stamp": {
            "$ref": "#/components/schemas/update_timestamp"
          },
          "content": {
            "type": "string",
            "example": "lalala"
          },
          "comment_count": {
            "type": "integer",
            "example": 50
          }
        }
      },
      "post": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/post_head"
          }
        ],
        "properties": {
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/attachment"
            }
          },
          "comments": {
            "type": "array",
            "required": "true",
            "items": {
              "$ref": "#/components/schemas/comment"
            },
            "maxItems": 20
          },
          "comment_query_mark": {
            "description": "use for paging comments, null if reached to the end",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/query_mark"
              }
            ]
          }
        }
      },
      "user": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "example": "r8hpppZ6mK"
          },
          "user_name": {
            "type": "string",
            "example": "james ye"
          },
          "url_key": {
            "type": "string",
            "example": "james_ye"
          },
          "signature": {
            "type": "string",
            "example": "I love physics",
            "description": "user signature, can not be an HTML element"
          },
          "avatar": {
            "type": "string",
            "example": "avatars.kcibald.com/hRkynUoTzP",
            "description": "url for avatar file"
          }
        }
      },
      "comment": {
        "type": "object",
        "properties": {
          "comment_id": {
            "type": "string"
          },
          "author": {
            "$ref": "#/components/schemas/user"
          },
          "create_time_stamp": {
            "$ref": "#/components/schemas/create_timestamp"
          },
          "update_time_stamp": {
            "$ref": "#/components/schemas/update_timestamp"
          },
          "content": {
            "type": "string",
            "example": "this is good"
          },
          "replies": {
            "$ref": "#/components/schemas/comment"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/attachment"
            }
          }
        }
      },
      "attachment": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "something",
            "description": "title of the attachment"
          },
          "link": {
            "type": "string",
            "example": "usercontent.kcibald/abcdefg.jpeg",
            "description": "url link of the attachment"
          }
        }
      },
      "upload_attachments": {
        "type": "array",
        "description": "This array contains attachments either embedded in the content or as an standalone attachment",
        "items": {
          "properties": {
            "title": {
              "type": "string",
              "example": "goodjob.jpg",
              "description": "title for the standalone attachments, it can be null for embedded images",
              "nullable": true
            },
            "upload_token": {
              "type": "string",
              "description": "The token received when client requested an upload, see: <a href=\"#tag/general/paths/~1upload/post\">/upload</a> endpoint",
              "example": "ZblLmIvw0e"
            }
          }
        }
      },
      "feed": {
        "type": "object",
        "description": "represents an event of user operation",
        "anyOf": [
          {
            "properties": {
              "type": {
                "type": "string",
                "description": "type of event, in this case, a new post in subscribed region",
                "enum": [
                  "REGION_SUBSCRIPTION:NEW_POST"
                ]
              },
              "detail": {
                "$ref": "#/components/schemas/post_head"
              },
              "source": {
                "$ref": "#/components/schemas/region"
              },
              "time": {
                "$ref": "#/components/schemas/create_timestamp"
              }
            }
          }
        ]
      },
      "create_timestamp": {
        "type": "integer",
        "format": "int64",
        "example": "1554806142"
      },
      "update_timestamp": {
        "allOf": [
          {
            "$ref": "#/components/schemas/create_timestamp"
          }
        ],
        "example": "1554806142",
        "nullable": true
      },
      "query_mark": {
        "type": "string",
        "description": "meant to be an identifier to mark the position of post listed, a tool for paging",
        "format": "hexadecimal",
        "minLength": "24",
        "maxLength": "24",
        "required": false,
        "example": "5c7fc05f802b95782f1f9e88",
        "nullable": true
      },
      "recaptcha_failure": {
        "description": "Recaptcha verification failed",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "CAPTCHA_VERIFICATION_FAILED"
            ]
          }
        }
      },
      "authorization_failure": {
        "description": "denied",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "AUTHORIZATION_DENIED"
            ]
          },
          "message": {
            "type": "string",
            "example": "you can create posts in this region",
            "nullable": true
          }
        }
      },
      "user_banned_failure": {
        "description": "user banned",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "USER_BANNED"
            ]
          },
          "banned_type": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "example": "you violated our terms",
                "nullable": true
              },
              "time_to_unban": {
                "type": "integer",
                "format": "int64",
                "description": "timestamp of unban, -1 if is permanent ban"
              }
            }
          }
        }
      },
      "invalid_attachment_failure": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "type": {
            "type": "string",
            "description": "<ul><li><b>ATTACHMENT_INVALID_ID</b>: the request token attached is invalid or expired</li><li><b>ATTACHMENT_TYPE_MISMATCH</b>: attachment type of \"embedded\" is not found in the uploaded content, or an attachment marked as avatar is included, etc...</li><li><b>ATTACHMENT_FILE_NOT_UPLOADED</b>: the attachment token do not have file associate with it</li></ul>",
            "enum": [
              "ATTACHMENT_INVALID_ID",
              "ATTACHMENT_TYPE_MISMATCH",
              "ATTACHMENT_FILE_NOT_UPLOADED"
            ]
          }
        }
      },
      "incorrect_password": {
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "PASSWORD_OR_USERNAME_INCORRECT"
            ]
          }
        }
      },
      "satisfiable_upload_response": {
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "upload_spec": {
                "type": "object",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/tencent_based_storage_upload_spec"
                  }
                ]
              },
              "reference_token": {
                "type": "string",
                "description": "token use to reference uploaded object",
                "example": "ZblLmIvw0e"
              },
              "reference_token_expire_time": {
                "type": "integer",
                "description": "expire time for the reference token, formatted in seconds from epoch, generally it is one day",
                "example": "1563102266"
              }
            }
          }
        }
      },
      "tencent_based_storage_upload_spec": {
        "type": "object",
        "description": "For Tencent based storage (using COS)",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "COS"
            ]
          },
          "credentials": {
            "type": "object",
            "description": "credentials for accessing the service",
            "properties": {
              "security_token": {
                "type": "string",
                "example": "5e776c4216ff4d31a7c74fe194a978a3ff2a42864"
              },
              "secret_id": {
                "type": "string",
                "example": "AKIDcAZnqgar9ByWq6m7ucIn8LNEuY2MkPCl"
              },
              "secret_key": {
                "type": "string",
                "example": "VpxrX0IMCpHXWL0Wr3KQNCqJix1uhMqD"
              }
            }
          },
          "upload_config": {
            "properties": {
              "bucket": {
                "type": "string",
                "example": "kcibald-test"
              },
              "region": {
                "type": "string",
                "example": "ap-hongkong"
              },
              "object_name": {
                "type": "string",
                "example": "avatars/ZblLmIvw0e.jpeg"
              },
              "storage_class": {
                "enum": [
                  "STANDARD",
                  "STANDARD_IA"
                ]
              },
              "meta_data_headers": {
                "type": "object",
                "default": {},
                "example": {
                  "x-cos-meta-object-relation": "eyJ1cGxvYWRfdXNlciI6ImthZHVmMyJ9"
                }
              }
            }
          }
        }
      },
      "unsatisfiable_upload_response": {
        "properties": {
          "success": {
            "enum": [
              false
            ]
          },
          "message": {
            "required": false,
            "description": "helpful message that maybe useful for the consumers",
            "example": "we run out of money, sorry no upload :("
          }
        }
      }
    },
    "responses": {
      "bad_request": {
        "description": "Bad request"
      },
      "common_auth": {
        "description": "Standard authorization failure",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/authorization_failure"
            }
          }
        }
      },
      "recaptcha_auth": {
        "description": "Recaptcha failure",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/recaptcha_failure"
            }
          }
        }
      },
      "no_authorization": {
        "description": "No authorization or authorization expired",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "success": {
                  "type": "boolean",
                  "enum": [
                    false
                  ]
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "AUTHORIZATION_MISSING_OR_INVALID"
                  ]
                }
              }
            }
          }
        },
        "headers": {
          "WWW-Authenticate": {
            "schema": {
              "enum": [
                "FormBased"
              ]
            }
          }
        }
      },
      "not_found": {
        "description": "Requested information not found",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "success": {
                  "type": "boolean",
                  "enum": [
                    false
                  ]
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "NOT_FOUND"
                  ]
                }
              }
            }
          }
        }
      },
      "server_failure": {
        "description": "Internal Error",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "success": {
                  "type": "boolean",
                  "enum": [
                    false
                  ]
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "INTERNAL_ERROR"
                  ]
                }
              }
            }
          }
        }
      }
    }
  }
}